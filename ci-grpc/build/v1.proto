syntax = "proto3";

option go_package = "build.rpc.v1";

// Request
// Build Job Request
message Request {
    // project name
    string name = 1;
    // event branch
    string branch = 2;
    // repository url
    string url = 3;
    // commit id
    int32 id = 4;
    // build language
    string language = 5;
    // default is "latest"
    string lanversion = 6;
    // is query the latest build job. Only use in query actions.
    bool latest = 7;
    // build owner
    string user = 8;
    // checkout_sha
    string sha = 9;
    // the latest commit message
    string message = 10;
    // build env
    map<string, string> env = 11;
}

message Reply {
    // 0 - success
    // other - failed
    int32 code = 1;
    // Empty when success, otherwise there will be error message
    string message = 2;
}

// JobDetail
// Job Detail Info
message JobDetail {
    string name = 1;
    // 1 - Git clone success
    //-1 - Git clone failed
    // 2 - Ntci parse success
    //-2 - Ntci parse failed
    // 3 - Building
    // 4 - Build success
    //-4 - Build failed
    int32 status = 2;
    string timestamp = 3;
    string branch = 4;
    string url = 5;
    int32 id = 6;
    string sha = 7;
    string message = 8;
}

message JobInfo {
    int32 count = 1;
    repeated JobDetail jd = 2;
}

// JobRequest
// Query Job Info via this message
message JobRequest {
    string owner = 1;
    string name = 2;
}
// Builder will update status via this message.
message Builder {
    // The build job name
    string jname = 1;
    // The build job id
    string jid = 2;
    // Job Status
    int32 status = 3;
    // Job Owner
    string user = 4;
}

message Job {
    // Job Owner
    string name = 1;
}

message Log {
    string message = 1;
}

service BuildService {
    rpc Run (Request) returns (Reply) {
    }

    rpc Ping (Request) returns (Reply) {
    }

    rpc GetJob (JobRequest) returns (JobInfo) {
    }

    // Builder update status via this rpc.
    rpc JobStatus (Builder) returns (Reply) {
    }

    rpc GetJobLog (Job) returns (stream Log) {
    }

    rpc RestartJob (Request) returns (Reply) {

    }
}
